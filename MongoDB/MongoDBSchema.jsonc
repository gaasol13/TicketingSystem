/* 
Collection: genres
Purpose: Stores basic genre information for categorizing performances
Relationships: Referenced by performers collection
*/
{
    "createCollection": "genres",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "bsonType": "string",
            "description": "Genre name - required and must be unique"
            // Examples: "Rock", "Classical", "Jazz"
          }
        }
      }
    },
    "validationLevel": "strict", // Enforces validation on all inserts and updates
    "validationAction": "error"  // Rejects invalid documents
  }
  
  /* 
  Collection: performers
  Purpose: Stores information about performers/artists
  Relationships: 
  - References genres (many-to-many)
  - Referenced by events collection
  */
  {
    "createCollection": "performers",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["name", "genres"],
        "properties": {
          "name": {
            "bsonType": "string",
            "description": "Performer name - required"
          },
          "description": {
            "bsonType": "string",
            "description": "Performer description - optional"
          },
          "genres": {
            "bsonType": "array",
            "items": {
              "bsonType": "objectId",
              "description": "Reference to genre IDs - enables genre-based searching"
            },
            "minItems": 1  // Performer must have at least one genre
          }
        }
      }
    }
  }
  
  /* 
  Collection: venues
  Purpose: Stores venue information including seating layout
  Relationships: Referenced by events collection
  Key features: 
  - Supports complex seating arrangements
  - Tracks venue capacity for ticket allocation
  */
  {
    "createCollection": "venues",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["name", "capacity"],
        "properties": {
          "name": {
            "bsonType": "string",
            "description": "Venue name - required"
          },
          "address": {
            "bsonType": "object",
            "required": ["street", "city", "state", "zipCode"],
            "properties": {
              "street": { "bsonType": "string" },
              "city": { "bsonType": "string" },
              "state": { "bsonType": "string" },
              "zipCode": { "bsonType": "string" }
            }
          },
          "capacity": {
            "bsonType": "int",
            "minimum": 1,
            "description": "Total venue capacity - must be positive"
          },
          "seatingLayout": {
            "bsonType": "object",
            "patternProperties": {
              "^[A-Z0-9]+$": {  // Section identifiers must be alphanumeric
                "bsonType": "object",
                "required": ["section", "rows", "seatsPerRow"],
                "properties": {
                  "section": { "bsonType": "string" },
                  "rows": { "bsonType": "int", "minimum": 1 },
                  "seatsPerRow": { "bsonType": "int", "minimum": 1 }
                }
              }
            }
          }
        }
      }
    }
  }
  
  /* 
  Collection: events
  Purpose: Stores event information and manages event lifecycle
  Relationships:
  - References venues (many-to-one)
  - References performers (many-to-many)
  - Referenced by ticketCategories and bookings
  Key features:
  - Status tracking for event lifecycle
  - Temporal indexing for date-based queries
  */
  {
    "createCollection": "events",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["title", "performers", "venue", "datetime", "status"],
        "properties": {
          "title": {
            "bsonType": "string",
            "description": "Event title - required"
          },
          "performers": {
            "bsonType": "array",
            "items": {
              "bsonType": "objectId",
              "description": "Array of performer IDs - supports multiple performers per event"
            },
            "minItems": 1  // Event must have at least one performer
          },
          "venue": {
            "bsonType": "objectId",
            "description": "Reference to venue ID"
          },
          "datetime": {
            "bsonType": "date",
            "description": "Event date and time - used for scheduling and queries"
          },
          "status": {
            "enum": ["SCHEDULED", "ON_SALE", "SOLD_OUT", "CANCELLED"],
            "description": "Event status - controls ticket availability"
          }
        }
      }
    }
  }
  
  /* 
  Collection: ticketCategories
  Purpose: Manages different ticket types and their availability
  Relationships:
  - References events (many-to-one)
  - Referenced by bookings
  Key features:
  - Real-time inventory tracking
  - Concurrent access management
  - Price differentiation
  */
  {
    "createCollection": "ticketCategories",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["event", "name", "price", "quantity", "availableQuantity"],
        "properties": {
          "event": {
            "bsonType": "objectId",
            "description": "Reference to event ID"
          },
          "name": {
            "bsonType": "string",
            "description": "Category name (e.g., 'VIP', 'General Admission')"
          },
          "price": {
            "bsonType": "decimal",
            "minimum": 0,
            "description": "Ticket price - stored as decimal for precision"
          },
          "quantity": {
            "bsonType": "int",
            "minimum": 0,
            "description": "Total number of tickets in this category"
          },
          "availableQuantity": {
            "bsonType": "int",
            "minimum": 0,
            "description": "Current available tickets - used for concurrent access control"
          }
        }
      }
    }
  }
  
  /* 
  Collection: users
  Purpose: Stores user information for ticket purchases
  Relationships: Referenced by bookings collection
  Key features:
  - Email validation
  - Unique constraint on email
  */
  {
    "createCollection": "users",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["email", "name"],
        "properties": {
          "email": {
            "bsonType": "string",
            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
            "description": "User email - required and must be valid format"
          },
          "name": {
            "bsonType": "string",
            "description": "User name - required"
          }
        }
      }
    }
  }
  
  /* 
  Collection: bookings
  Purpose: Manages ticket bookings and their lifecycle
  Relationships:
  - References users (many-to-one)
  - References events (many-to-one)
  - References ticketCategories (many-to-many)
  Key features:
  - Embedded tickets for atomic operations
  - Status tracking
  - Temporal tracking
  - Optimistic locking support
  */
  {
    "createCollection": "bookings",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["user", "event", "status", "totalAmount", "tickets", "createdAt"],
        "properties": {
          "user": {
            "bsonType": "objectId",
            "description": "Reference to user ID"
          },
          "event": {
            "bsonType": "objectId",
            "description": "Reference to event ID"
          },
          "status": {
            "enum": ["PENDING", "CONFIRMED", "CANCELLED"],
            "description": "Booking status - used for payment and fulfillment tracking"
          },
          "totalAmount": {
            "bsonType": "decimal",
            "minimum": 0,
            "description": "Total booking amount - stored as decimal for precision"
          },
          "createdAt": {
            "bsonType": "date",
            "description": "Booking creation timestamp - used for timeout management"
          },
          "tickets": {
            "bsonType": "array",
            "items": {
              "bsonType": "object",
              "required": ["ticketCategory", "price", "status"],
              "properties": {
                "ticketCategory": {
                  "bsonType": "objectId",
                  "description": "Reference to ticket category ID"
                },
                "seat": {
                  "bsonType": "object",
                  "required": ["section", "row", "number"],
                  "properties": {
                    "section": { "bsonType": "string" },
                    "row": { "bsonType": "string" },
                    "number": { "bsonType": "string" }
                  }
                },
                "price": {
                  "bsonType": "decimal",
                  "minimum": 0,
                  "description": "Individual ticket price at time of booking"
                },
                "status": {
                  "enum": ["RESERVED", "CONFIRMED", "CANCELLED"],
                  "description": "Individual ticket status"
                }
              }
            },
            "minItems": 1  // Booking must include at least one ticket
          }
        }
      }
    }
  }
  
  /* 
  Index Definitions
  Purpose: Optimize query performance and enforce constraints
  Key features:
  - Support for high-concurrency operations
  - Efficient query patterns
  - Unique constraints
  */
  {
    "createIndexes": "genres",
    "indexes": [
      {
        "key": { "name": 1 },
        "name": "unique_genre_name",
        "unique": true  // Prevents duplicate genre names
      }
    ]
  }
  
  {
    "createIndexes": "events",
    "indexes": [
      {
        "key": { "datetime": 1 },
        "name": "event_datetime",  // Supports date range queries
        "background": true  // Index built in background to avoid blocking operations
      },
      {
        "key": { "status": 1 },
        "name": "event_status",  // Supports status-based queries
        "background": true
      }
    ]
  }
  
  {
    "createIndexes": "ticketCategories",
    "indexes": [
      {
        "key": { "event": 1, "availableQuantity": 1 },
        "name": "ticket_availability",  // Supports availability checks
        "background": true
      }
    ]
  }
  
  {
    "createIndexes": "bookings",
    "indexes": [
      {
        "key": { "event": 1, "status": 1 },
        "name": "booking_event_status",  // Supports event booking queries
        "background": true
      },
      {
        "key": { "user": 1, "createdAt": -1 },
        "name": "user_bookings",  // Supports user booking history queries
        "background": true
      }
    ]
  }