/* 
Collection: genres
Purpose: Stores basic genre information for categorizing performances
Relationships: Referenced by performers collection
*/
{
    "collMod": "genres",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["name"],
        "additionalProperties": false,
        "properties": {
          "_id": {},
          "name": {
            "bsonType": "string",
            "description": "Genre name is required and must be unique"
          }
        }
      }
    },
    "validationLevel": "strict",
    "validationAction": "error"
  }
  /*
      Fields:
        _id: ObjectId (automatically generated)
        name: String, required, unique*/

  
  /* 
  Collection: performers
  Purpose: Stores information about performers/artists
  Relationships: 
  - References genres (many-to-many)
  - Referenced by events collection
  */
  {
  "collMod": "performers",
  "validator": {
    "$jsonSchema": {
      "bsonType": "object",
      "required": ["name", "genre_id"],
      "additionalProperties": false,
      "properties": {
        "_id": {},
        "name": {
          "bsonType": "string",
          "description": "Performer name is required and must be unique"
        },
        "genre_id": {
          "bsonType": "objectId",
          "description": "Genre ID is required and must reference the genres collection"
        }
      }
    }
  },
  "validationLevel": "strict",
  "validationAction": "error"
}
  
  /* 
  Collection: venues
  Purpose: Stores venue information including seating layout
  Relationships: Referenced by events collection
  Key features: 
  - Supports complex seating arrangements
  - Tracks venue capacity for ticket allocation
  */
  {
    "collMod": "venues",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["name", "address", "type", "capacity"],
        "additionalProperties": false,
        "properties": {
          "_id": {},
          "name": {
            "bsonType": "string",
            "description": "Venue name is required and must be unique"
          },
          "address": {
            "bsonType": "string",
            "description": "Address is required"
          },
          "type": {
            "bsonType": "string",
            "description": "Type of venue is required"
          },
          "capacity": {
            "bsonType": "int",
            "minimum": 0,
            "description": "Capacity is required and must be a non-negative integer"
          }
        }
      }
    },
    "validationLevel": "strict",
    "validationAction": "error"
  }
  
  /* 
  Collection: events
  Purpose: Stores event information and manages event lifecycle
  Relationships:
  - References venues (many-to-one)
  - References performers (many-to-many)
  - Referenced by ticketCategories and bookings
  Key features:
  - Status tracking for event lifecycle
  - Temporal indexing for date-based queries
  */
  {
    "collMod": "events",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["name", "performer_id", "date", "venue_id", "ticket_categories"],
        "additionalProperties": false,
        "properties": {
          "_id": {},
          "name": {
            "bsonType": "string",
            "description": "Event name is required"
          },
          "performer_id": {
            "bsonType": "objectId",
            "description": "Performer ID is required and must reference the performers collection"
          },
          "date": {
            "bsonType": "date",
            "description": "Event date is required"
          },
          "venue_id": {
            "bsonType": "objectId",
            "description": "Venue ID is required and must reference the venues collection"
          },
          "ticket_categories": {
            "bsonType": "array",
            "description": "Array of ticket categories",
            "items": {
              "bsonType": "object",
              "required": ["description", "price", "start_date", "end_date", "area"],
              "additionalProperties": false,
              "properties": {
                "description": {
                  "bsonType": "string",
                  "description": "Category description is required"
                },
                "price": {
                  "bsonType": "decimal",
                  "minimum": 0,
                  "description": "Price is required and must be a non-negative decimal"
                },
                "start_date": {
                  "bsonType": "date",
                  "description": "Ticket availability start date is required"
                },
                "end_date": {
                  "bsonType": "date",
                  "description": "Ticket availability end date is required"
                },
                "area": {
                  "bsonType": "string",
                  "description": "Seating area description is required"
                }
              }
            }
          }
        }
      }
    },
    "validationLevel": "strict",
    "validationAction": "error"
  }
  
  /* 
  Collection: ticketCategories
  Purpose: Manages different ticket types and their availability
  Relationships:
  - References events (many-to-one)
  - Referenced by bookings
  Key features:
  - Real-time inventory tracking
  - Concurrent access management
  - Price differentiation
  */
  {
    "createCollection": "ticketCategories",
    "validator": {
      "$jsonSchema": {
        "bsonType": "object",
        "required": ["event", "name", "price", "quantity", "availableQuantity"],
        "properties": {
          "event": {
            "bsonType": "objectId",
            "description": "Reference to event ID"
          },
          "name": {
            "bsonType": "string",
            "description": "Category name (e.g., 'VIP', 'General Admission')"
          },
          "price": {
            "bsonType": "decimal",
            "minimum": 0,
            "description": "Ticket price - stored as decimal for precision"
          },
          "quantity": {
            "bsonType": "int",
            "minimum": 0,
            "description": "Total number of tickets in this category"
          },
          "availableQuantity": {
            "bsonType": "int",
            "minimum": 0,
            "description": "Current available tickets - used for concurrent access control"
          }
        }
      }
    }
  }
  
  /* 
  Collection: users
  Purpose: Stores user information for ticket purchases
  Relationships: Referenced by bookings collection
  Key features:
  - Email validation
  - Unique constraint on email
  */
  
  "collMod": "users",
  "validator": {
    "$jsonSchema": {
      "bsonType": "object",
      "required": ["username", "email", "password_hash", "confirmation_code", "registration_date"],
      "additionalProperties": false,
      "properties": {
        "_id": {},
        "username": {
          "bsonType": "string",
          "description": "Username is required and must be unique"
        },
        "email": {
          "bsonType": "string",
          "pattern": "^.+@.+\\..+$",
          "description": "Email is required, must be unique, and must follow email format"
        },
        "password_hash": {
          "bsonType": "string",
          "description": "Password hash is required"
        },
        "confirmation_code": {
          "bsonType": "string",
          "description": "Confirmation code is required"
        },
        "registration_date": {
          "bsonType": "date",
          "description": "Registration date is required"
        }
      }
    }
  },
  "validationLevel": "strict",
  "validationAction": "error"
}
  
  /* 
  Collection: bookings
  Purpose: Manages ticket bookings and their lifecycle
  Relationships:
  - References users (many-to-one)
  - References events (many-to-one)
  - References ticketCategories (many-to-many)
  Key features:
  - Embedded tickets for atomic operations
  - Status tracking
  - Temporal tracking
  - Optimistic locking support
  */
  
  "collMod": "bookings",
  "validator": {
    "$jsonSchema": {
      "bsonType": "object",
      "required": ["user_id", "delivery_email", "delivery_time", "time_paid", "time_sent", "total_price", "discount", "final_price", "status", "tickets"],
      "additionalProperties": false,
      "properties": {
        "_id": {},
        "user_id": {
          "bsonType": "objectId",
          "description": "User ID is required and must reference the users collection"
        },
        "delivery_email": {
          "bsonType": "string",
          "pattern": "^.+@.+\\..+$",
          "description": "Delivery email is required and must follow email format"
        },
        "delivery_time": {
          "bsonType": "date",
          "description": "Delivery time is required"
        },
        "time_paid": {
          "bsonType": "date",
          "description": "Time paid is required"
        },
        "time_sent": {
          "bsonType": "date",
          "description": "Time sent is required"
        },
        "total_price": {
          "bsonType": "decimal",
          "minimum": 0,
          "description": "Total price is required and must be a non-negative decimal"
        },
        "discount": {
          "bsonType": "decimal",
          "minimum": 0,
          "description": "Discount is required and must be a non-negative decimal"
        },
        "final_price": {
          "bsonType": "decimal",
          "minimum": 0,
          "description": "Final price is required and must be a non-negative decimal"
        },
        "status": {
          "enum": ["confirmed", "in-progress", "canceled"],
          "description": "Booking status is required and must be one of the specified values"
        },
        "tickets": {
          "bsonType": "array",
          "description": "Array of ticket references",
          "items": {
            "bsonType": "objectId",
            "description": "Each ticket must reference the tickets collection"
          },
          "uniqueItems": true
        }
      }
    }
  },
  "validationLevel": "strict",
  "validationAction": "error"
}
  
  /* 
  Index Definitions
  Purpose: Optimize query performance and enforce constraints
  Key features:
  - Support for high-concurrency operations
  - Efficient query patterns
  - Unique constraints
  */
  {
    "createIndexes": "genres",
    "indexes": [
      {
        "key": { "name": 1 },
        "name": "unique_genre_name",
        "unique": true  // Prevents duplicate genre names
      }
    ]
  }
  
  {
    "createIndexes": "events",
    "indexes": [
      {
        "key": { "datetime": 1 },
        "name": "event_datetime",  // Supports date range queries
        "background": true  // Index built in background to avoid blocking operations
      },
      {
        "key": { "status": 1 },
        "name": "event_status",  // Supports status-based queries
        "background": true
      }
    ]
  }
  
  {
    "createIndexes": "ticketCategories",
    "indexes": [
      {
        "key": { "event": 1, "availableQuantity": 1 },
        "name": "ticket_availability",  // Supports availability checks
        "background": true
      }
    ]
  }
  
  {
    "createIndexes": "bookings",
    "indexes": [
      {
        "key": { "event": 1, "status": 1 },
        "name": "booking_event_status",  // Supports event booking queries
        "background": true
      },
      {
        "key": { "user": 1, "createdAt": -1 },
        "name": "user_bookings",  // Supports user booking history queries
        "background": true
      }
    ]
  }